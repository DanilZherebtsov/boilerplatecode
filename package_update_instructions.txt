Every time you want to update your package: 

	0. If adding new Class, (to make it callable after import) to __init__.py add: from your_package_name.NewClassName import NewClassName

	Also for new classes it is a good practice to add a class version.

	1. update index.rst file in the docs folder if necessary, increment index.rst version.

	2. increment the library version in the version.py.

	3. push changes to github.

	4. create a new release:
		First, go to github.com and navigate to your repository. Next, click on the tab “releases” and then on “Create/Draft a new release”.

	5. specify a new release tag
		define a Tag version (should correspond to the updated library version)

	6. Add a release title and a description (not that important), then click “publish release”

	7. copy-paste the link to .tar.gz into the setup.py 
		On github a new release is under Assets, there is a link to Source Code (tar.gz). Copy this Link Address. 
		Paste this link-address into the download_url field in the setup.py file.

	8. in terminal
		- navigate to the package folder
		- create a source distribution
			python setup.py sdist
		- upload package to pypi (if no twine package: pip install twine)
			twine upload --skip-existing dist/*

Upgrade package using pip:
pip install --upgrade your_package_name


